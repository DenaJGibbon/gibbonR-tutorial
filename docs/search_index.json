[["part-1.-prepare-training-data.html", "2 Part 1. Prepare Training Data 2.1 Download the data from Github 2.2 Part 1A. Training Data with Labeled .wav clips 2.3 Part 1B. Training Data with Raven Selection Tables", " 2 Part 1. Prepare Training Data In ‘gibbonR’ there are two ways that you can format your training data. The first can be a set of labelled .wav clips with the class indicated in the name of the file (e.g., ‘gibbon_01.wav’ and ‘noise_01.wav’). The second is to have a folder of selection tables created in Raven Pro (K. Lisa Yang Center for Conservation Bioacoustics) and a folder with the associated ‘.wav’ files. For the second approach there must be an annotation column indicating the call type and it is assumed that all signals of interest are annotated, and the rest of the files contain only background noise. 2.1 Download the data from Github # You need to tell R where to store the zip files on your computer. destination.file.path.zip &lt;- &quot;/Users/denaclink/Downloads/BorneoExampleData.zip&quot; # You also need to tell R where to save the unzipped files destination.file.path &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/&quot; # This function will download the data from github utils::download.file(&quot;https://github.com/DenaJGibbon/BorneoExampleData/archive/master.zip&quot;, destfile = destination.file.path.zip) # This function will unzip the file utils::unzip(zipfile = destination.file.path.zip, exdir = destination.file.path) # Examine the contents list.of.sound.files &lt;- list.files(paste(destination.file.path, &quot;BorneoExampleData-master&quot;, &quot;data&quot;, sep = &quot;/&quot;), full.names = T) list.of.sound.files Use this function to read in the .RDA file and save it as an R object from https://stackoverflow.com/questions/5577221/how-can-i-load-an-object-into-a-variable-name-that-i-specify-from-an-r-data-file loadRData &lt;- function(fileName) { #loads an RData file, and returns it load(fileName) get(ls()[ls() != &quot;fileName&quot;]) } This function will load the entire list of r data files list.rda.files &lt;- list() for(x in 1:length(list.of.sound.files)){ list.rda.files[[x]] &lt;- loadRData(list.of.sound.files[[x]]) } Assign each rda an informative name multi.class.list &lt;- list.rda.files[[1]] S11_20180219_060002_1800sto3600s &lt;- list.rda.files[[2]] Now we create a directory with the training .wav files TrainingDataDirectory &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/BorneoMultiClass&quot; for(a in 1:length(multi.class.list)){ Temp.element &lt;- multi.class.list[[a]] writeWave(Temp.element[[2]], paste(TrainingDataDirectory,Temp.element[[1]],sep=&#39;/&#39;)) } 2.2 Part 1A. Training Data with Labeled .wav clips 2.2.1 Read in clips and calculate MFCCs TrainingWavFilesDir &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/BorneoMultiClass/&quot; trainingdata &lt;- gibbonR::MFCCFunction(input.dir=TrainingWavFilesDir, min.freq = 400, max.freq = 1600,win.avg=&quot;standard&quot;) trainingdata$class &lt;- as.factor(trainingdata$class) 2.2.2 Compare Random Forest and Support Vector Machine for Supervised Classification trainingdata$class &lt;- as.factor(trainingdata$class) ml.model.svm &lt;- e1071::svm(trainingdata[, 2:ncol(trainingdata)], trainingdata$class, kernel = &quot;radial&quot;, cross = 25, probability = TRUE) print(paste(&#39;SVM accuracy&#39;,ml.model.svm$tot.accuracy)) ## [1] &quot;SVM accuracy 88&quot; ml.model.rf &lt;- randomForest::randomForest(x=trainingdata[, 2:ncol(trainingdata)], y = trainingdata$class) print(ml.model.rf) ## ## Call: ## randomForest(x = trainingdata[, 2:ncol(trainingdata)], y = trainingdata$class) ## Type of random forest: classification ## Number of trees: 500 ## No. of variables tried at each split: 13 ## ## OOB estimate of error rate: 10.67% ## Confusion matrix: ## female.gibbon leaf.monkey noise solo.gibbon class.error ## female.gibbon 18 0 1 1 0.10 ## leaf.monkey 0 12 3 0 0.20 ## noise 0 0 18 2 0.10 ## solo.gibbon 0 1 0 19 0.05 2.3 Part 1B. Training Data with Raven Selection Tables 2.3.1 Prepare training data from labeled annotations # Specify the folder where the training data will be saved TrainingDataFolderLocation &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/TrainingDataFromRavenSelectionTables&quot; # Directory with annotated selection tables AnnotatedSelectionTables &lt;- list.files(&quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/SelectionTables/GibbonTrainingSelectionTables/&quot;, full.names = T) # Directory with corresponding .wav files AnnotatedWaveFiles &lt;- list.files(&quot;/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/GibbonTrainingFiles/&quot;,full.names = T) AnnotatedWaveFilesShort &lt;- list.files(&quot;/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/GibbonTrainingFiles/&quot;,full.names = F) AnnotatedWaveFilesShort &lt;- str_split_fixed(AnnotatedWaveFilesShort,pattern = &#39;.wav&#39;, n=2)[,1] # Loop to cut out the corresponding annotations into short clips for(i in 1: length(AnnotatedSelectionTables)){ # Read in selection table TempSelectionTable &lt;- read.delim2(AnnotatedSelectionTables[i]) # Find the corresponding soundfile SoundFileIndex &lt;- which(str_detect(AnnotatedSelectionTables[i],AnnotatedWaveFilesShort)) TempAnnotateWave &lt;- readWave(AnnotatedWaveFiles[SoundFileIndex]) ShortSoundClips &lt;- lapply(1:nrow(TempSelectionTable), function(j) extractWave(TempAnnotateWave, from= as.numeric(TempSelectionTable[j,]$Begin.Time..s.), to=as.numeric(TempSelectionTable[j,]$ End.Time..s.), xunit = c(&quot;time&quot;),plot=F,output=&quot;Wave&quot;)) # Write wave files to folder for(k in 1:length(ShortSoundClips)){ TempClip &lt;- ShortSoundClips[[k]] WavFileName &lt;- paste(TrainingDataFolderLocation,&#39;/female.gibbon_&#39;, k, &#39;.wav&#39;,sep=&quot;&quot;) writeWave(TempClip,WavFileName,extensible = F) } } 2.3.2 Prepare noise training data from files without target signal # Specify the folder where the training data will be saved TrainingDataFolderLocation &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/TrainingDataFromRavenSelectionTables/&quot; # Directory with annotated selection tables NoiseSelectionTables &lt;- list.files(&quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/SelectionTables/NoiseSelectionTables/&quot;, full.names = T) # Directory with corresponding .wav files NoiseWaveFiles &lt;- list.files(&quot;/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/NoiseFiles/&quot;,full.names = T) NoiseWaveFilesShort &lt;- list.files(&quot;/Users/denaclink/Library/CloudStorage/Box-Box/gibbonRSampleFiles/NoiseFiles/&quot;,full.names = F) NoiseWaveFilesShort &lt;- str_split_fixed(NoiseWaveFilesShort,pattern = &#39;.wav&#39;, n=2)[,1] for(i in 1:length(NoiseSelectionTables)){ # Find the corresponding soundfile SoundFileIndex &lt;- which(str_detect(NoiseSelectionTables[i],NoiseWaveFilesShort)) DetectBLED(input=NoiseWaveFiles[SoundFileIndex], min.freq = 400, max.freq = 1600, noise.quantile.val=0.3, spectrogram.window =512, pattern.split = &quot;.wav&quot;, min.signal.dur = 3, max.sound.event.dur = 12, wav.output = &quot;TRUE&quot;, output.dir = TrainingDataFolderLocation, swift.time=TRUE, time.start=06, time.stop=11, write.table.output=TRUE, verbose=TRUE, random.sample=FALSE) } 2.3.3 Now read in clips based on Raven Selection tables and calculate MFCCs TrainingWavFilesDir &lt;- &quot;/Users/denaclink/Desktop/RStudio Projects/gibbonR/data/TrainingDataFromRavenSelectionTables/&quot; trainingdata &lt;- gibbonR::MFCCFunction(input.dir=TrainingWavFilesDir, min.freq = 400, max.freq = 1600,win.avg=&quot;standard&quot;) trainingdata$class &lt;- as.factor(trainingdata$class) 2.3.4 Compare Random Forest and Support Vector Machine for Supervised Classification trainingdata$class &lt;- as.factor(trainingdata$class) ml.model.svm &lt;- e1071::svm(trainingdata[, 2:ncol(trainingdata)], trainingdata$class, kernel = &quot;radial&quot;, cross = 25, probability = TRUE) print(paste(&#39;SVM accuracy&#39;,ml.model.svm$tot.accuracy)) ## [1] &quot;SVM accuracy 98.1132075471698&quot; ml.model.rf &lt;- randomForest::randomForest(x=trainingdata[, 2:ncol(trainingdata)], y = trainingdata$class) print(ml.model.rf) ## ## Call: ## randomForest(x = trainingdata[, 2:ncol(trainingdata)], y = trainingdata$class) ## Type of random forest: classification ## Number of trees: 500 ## No. of variables tried at each split: 13 ## ## OOB estimate of error rate: 7.55% ## Confusion matrix: ## female.gibbon noise class.error ## female.gibbon 24 2 0.07692308 ## noise 2 25 0.07407407 "]]
