part-1.-prepare-training-data
download-the-data-from-github
part-1a.-training-data-with-labeled-.wav-clips
read-in-clips-and-calculate-mfccs
compare-random-forest-and-support-vector-machine-for-supervised-classification
part-1b.-training-data-with-raven-selection-tables
prepare-training-data-from-labeled-annotations
prepare-noise-training-data-from-files-without-target-signal
now-read-in-clips-based-on-raven-selection-tables-and-calculate-mfccs
compare-random-forest-and-support-vector-machine-for-supervised-classification-1
part-2.-run-the-detectorclassifier
part-2a.-feature-extraction
part-2b.-run-the-detectorclassifier-using-the-gibbonr-function.
part-4.-data-visualization
part-4a.-create-a-umap-plot-colored-by-class
part-4b.-create-a-umap-plot-colored-by-affinity-propagation-clustering
output
part-3.-calculate-performance-metrics
part-3a.-load-libraries-and-specify-file-paths
part-3b.-now-we-match-the-detections-from-the-model-to-human-annotations.-the-start-timeend-time-buffer-tells-us-how-much-flexibility-the-detections-can-have-from-the-startend-time-of-the-call.-if-the-calls-are-short-then-this-should-be-short.
part-3c.-now-that-we-have-matched-annotations-and-detections-we-can-calculate-performance-over-a-number-of-thresholds
section
part-3b.-match-detections-with-human-annotations
part-3c.-calculate-performance-metrics
d.-plot-the-results
